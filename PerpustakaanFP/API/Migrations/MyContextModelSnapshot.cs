// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Author");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BookTitle");

                    b.Property<string>("PublicationYear")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PublicationYear");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Publisher");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("API.Model.Borrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookId");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BorrowDate");

                    b.Property<int>("Fine")
                        .HasColumnType("int")
                        .HasColumnName("Fine");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberId");

                    b.Property<int>("OfficerId")
                        .HasColumnType("int")
                        .HasColumnName("OfficerId");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Returndate");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Borrow", (string)null);
                });

            modelBuilder.Entity("API.Model.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasColumnName("LastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("API.Models.AccountRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("role_id")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("role_id");

                    b.ToTable("AccountRoles", (string)null);
                });

            modelBuilder.Entity("API.Models.Accounts", b =>
                {
                    b.Property<int>("memberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("memberId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("API.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("API.Model.Book", b =>
                {
                    b.HasOne("API.Model.Borrow", "Borrow")
                        .WithMany("Book")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("API.Model.Borrow", b =>
                {
                    b.HasOne("API.Model.Member", "Member")
                        .WithMany("Borrow")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Member");
                });

            modelBuilder.Entity("API.Models.AccountRoles", b =>
                {
                    b.HasOne("API.Models.Accounts", "Accounts")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Models.Roles", "Roles")
                        .WithMany("AccountRoles")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Accounts");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("API.Models.Accounts", b =>
                {
                    b.HasOne("API.Model.Member", "Member")
                        .WithOne("Accounts")
                        .HasForeignKey("API.Models.Accounts", "memberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Member");
                });

            modelBuilder.Entity("API.Model.Borrow", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("API.Model.Member", b =>
                {
                    b.Navigation("Accounts")
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("API.Models.Accounts", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("API.Models.Roles", b =>
                {
                    b.Navigation("AccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
